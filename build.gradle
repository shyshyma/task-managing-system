plugins {
    id "java"
    id "org.springframework.boot" version "2.6.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "checkstyle"
    id "jacoco"
}

group = "org.itransition"
version = "1.0-RELEASE"
description = "Provides simple RESTful API for managing tasks"

sourceCompatibility = "17"
targetCompatibility = "17"

jar {
    enabled = false
}

checkstyle {
    toolVersion "9.1"
    ignoreFailures = false
    reportsDir = file "$buildDir/reports/checkstyle"
}

checkstyleMain {
    source = "src/main/java"
    configFile = file "checkstyles/checkstyle.xml"
}

checkstyleTest {
    source = "src/test/java"
    configFile = file "checkstyles/checkstyle-test.xml"
}

def excludingList = [
        '**/taskmanager/*.class',
        '**/config/**',
        '**/taskmanager/dto/**',
        '**/exception/**',
        '**/jpa/**',
        '**/mapper/**'
]

jacoco {
    reportsDirectory = layout.buildDirectory.dir("reports/code-coverage")
    jacocoTestReport {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludingList)
            }))
        }
        dependsOn test
    }
    jacocoTestCoverageVerification {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: excludingList)
            }))
        }
        violationRules {
            rule {
                limit {
                    counter = 'BRANCH'
                    value = 'COVEREDRATIO'
                    minimum = 0.8
                }
            }
            rule {
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.9
                }
            }
        }
        dependsOn check
    }
}

repositories {
    mavenCentral()
}

ext {
    mysqlConnectorVersion = '8.0.25'
    liquibaseVersion = '4.7.1'
    commonsLangVersion = "3.12.0"
    mapStructVersion = "1.4.2.Final"
    lombokVersion = "1.18.22"
    javaFakerVersion = "1.0.2"
    cloudVersion = '3.1.0'
    embeddedMySqlVersion = '2.0.20'
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-freemarker"
    implementation "mysql:mysql-connector-java:$mysqlConnectorVersion"
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"
    implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
    implementation "org.mapstruct:mapstruct:$mapStructVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"

    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "com.github.javafaker:javafaker:$javaFakerVersion"
    testImplementation "org.springframework.cloud:spring-cloud-starter-bootstrap:$cloudVersion"
    testImplementation "com.playtika.testcontainers:embedded-mysql:$embeddedMySqlVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"

    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
