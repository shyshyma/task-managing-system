plugins {
    id "java"
    id "org.springframework.boot" version "2.6.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "checkstyle"
    id "jacoco"
}

//disabled creation of the build folder at root in multi-projects application
jar.enabled = false
bootJar.enabled = false
bootJarMainClassName.enabled = false

ext {
    commonsLangVersion = "3.12.0"
    mapStructVersion = "1.4.2.Final"
    lombokVersion = "1.18.22"
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    //cause spring boot plugin already creates jar, duplicated jar is redundant
    jar.enabled = false

    group = "org.itransition"
    version = "1.0-RELEASE"

    sourceCompatibility = "17"
    targetCompatibility = "17"

    checkstyle {
        toolVersion = "9.1"
        ignoreFailures = false
        reportsDir = file "$buildDir/reports/checkstyle"
    }

    checkstyleMain {
        source = "src/main/java"
        configFile = file "$rootDir/checkstyles/checkstyle.xml"
    }

    checkstyleTest {
        source = "src/test/java"
        configFile = file "$rootDir/checkstyles/checkstyle-test.xml"
    }

    def excludingList = [
            '**/taskmanager/*.class',
            '**/config/**',
            '**/dto/**',
            '**/exception/**',
            '**/jpa/**',
            '**/mapper/**'
    ]

    jacoco {
        reportsDirectory = layout.buildDirectory.dir("reports/code-coverage")
        jacocoTestReport {
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: excludingList)
                }))
            }
            dependsOn test
        }
        jacocoTestCoverageVerification {
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: excludingList)
                }))
            }
            violationRules {
                rule {
                    limit {
                        counter = 'BRANCH'
                        value = 'COVEREDRATIO'
                        minimum = 0.8
                    }
                }
                rule {
                    limit {
                        counter = 'LINE'
                        value = 'COVEREDRATIO'
                        minimum = 0.9
                    }
                }
            }
            dependsOn check
        }
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-amqp"
        implementation "org.apache.commons:commons-lang3:$commonsLangVersion"
        implementation "org.mapstruct:mapstruct:$mapStructVersion"

        compileOnly "org.projectlombok:lombok:$lombokVersion"

        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"

        testImplementation "org.springframework.boot:spring-boot-starter-test"

        testCompileOnly "org.projectlombok:lombok:$lombokVersion"

        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    repositories {
        mavenCentral()
    }
}
